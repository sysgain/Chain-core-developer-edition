{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "westus"
        },
        "regionCount": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Select the number of region(s) to deploy virtual machines into."
            }
        },
        "location_1": {
            "type": "string",
            "defaultValue": "westus"
        },
        "location_2": {
            "type": "string",
            "defaultValue": "eastus"
        },
        "location_3": {
            "type": "string",
            "defaultValue": "centralus"
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Authorization type for SSH access to VMs"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "chainuser",
            "metadata": {
                "description": "Administrator username of each deployed VM (alphanumeric characters only)"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Administrator password for each deployed VM"
            }
        },
        "sshPublicKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "SSH RSA public key file as a string"
            }
        },
        "generatorVmSize": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "metadata": {
                "description": "Size of the virtual machine used for Block Generator VM"
            }
        },
        "signerVmSize": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "metadata": {
                "description": "Size of the virtual machine used for Signer VM(s)"
            }
        },
        "participantVmSize":{
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "metadata": {
                "description": "Size of the virtual machine used for Participants VM(s)"
            }
        },
        "signerNodeCountReg1": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Number of signer chain core instances in Region 1"
            }
        },
        "participantNodeCountReg1": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Number of participant chain core instances in Region 1"
            }
        },
        "signerNodeCountReg2": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1
            ],
            "metadata": {
                "description": "Number of signer chain core instances in Region 2"
            }
        },
        "participantNodeCountReg2": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1
            ],
            "metadata": {
                "description": "Number of participant chain core instances in Region 2"
            }
        },
        "signerNodeCountReg3": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1
            ],
            "metadata": {
                "description": "Number of signer chain core instances in Region 3"
            }
        },
        "participantNodeCountReg3": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [
                0,
                1
            ],
            "metadata": {
                "description": "Number of participant chain core instances in Region 3"
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "Type of managed disks to create"
            }
        },
        "VPNSharedKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "VPN shared key is used by gateway connections. It could be any passphrase"
            }
        },
        "objectId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Azure access control user objectId for Service principal"
            }
        },
        "servicePrincipal": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Service principal objectId"
            }
        },
        "secretKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Service principal secret key"
            }
        },
        "baseUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/sysgain/Chain-core-developer-edition/dev3",
            "metadata": {
                "artifactsBaseUrl": "The base URL for dependent assets"
            }
        }
    },
    "variables": {
        "baseUrl": "[parameters('baseUrl')]",
        "regionCount": "[parameters('regionCount')]",
        "signerNodeCountReg1": "[parameters('signerNodeCountReg1')]",
        "participantNodeCountReg1": "[parameters('participantNodeCountReg1')]",
        "signerNodeCountReg2": "[parameters('signerNodeCountReg2')]",
        "participantNodeCountReg2": "[parameters('participantNodeCountReg2')]",
        "signerNodeCountReg3": "[parameters('signerNodeCountReg3')]",
        "participantNodeCountReg3": "[parameters('participantNodeCountReg3')]",
        "location_1": "[tolower(replace(parameters('location_1'),' ',''))]",
        "location_2": "[tolower(replace(parameters('location_2'),' ',''))]",
        "location_3": "[tolower(replace(parameters('location_3'),' ',''))]",
        "signerCountReg2and3": "[add(variables('signerNodeCountReg2'),variables('signerNodeCountReg3'))]",
        "partCountReg2and3": "[add(variables('participantNodeCountReg2'),variables('participantNodeCountReg3'))]",
        "totalCountReg2and3": "[add(variables('signerCountReg2and3'),variables('partCountReg2and3'))]",
        "totalCountReg2": "[add(variables('signerNodeCountReg2'),variables('participantNodeCountReg2'))]",
        "totalCountReg3": "[add(variables('signerNodeCountReg3'),variables('participantNodeCountReg3'))]",
        "prefix": "chn",
        "suffix": "[substring(uniqueString(resourceGroup().id) ,0, 4)]",
        "multiTemplate": [
            "multi-dummy.json",
            "multi-region.json",
            "multi-region.json",
            "multi-region.json",
            "multi-region.json"
        ],
        "regionTemplate": [
            "region-dummy.json",
            "region-setup.json",
            "region-setup.json"
        ],
        "signerTemplate": [
            "signer-dummy.json",
            "signer-setup.json",
            "signer-setup.json",
            "signer-setup.json"
        ],
        "participantTemplate": [
            "participant-dummy.json",
            "participant-setup.json",
            "participant-setup.json",
            "participant-setup.json"
        ],
        "pipGwtTemplate": [
            "generator-gtwy-pip-dummy.json",
            "generator-gtwy-pip.json",
            "generator-gtwy-pip.json",
            "generator-gtwy-pip.json"
        ],
        "vpnGwtTemplate": [
            "gateway-dummy.json",
            "gateway.json",
            "gateway.json",
            "gateway.json"
        ],
        "connectionsTemplate": [
            "connections-dummy.json",
            "connections.json",
            "connections.json",
            "connections.json"
        ],
        "vnetTemplate": [
            "vnet-one.json",
            "vnet-one.json",
            "vnet-one-multi.json",
            "vnet-one-multi.json"
        ],
        "generatorNicName": "[concat(variables('prefix'),'-gen-nic')]",
        "generatorVmName": "[concat(variables('prefix'),'-gen-vm')]",
        "generatorPipName": "[concat(variables('prefix'),'-gen-pip')]",
        "signerNicName": "[concat(variables('prefix'),'-signer-nic')]",
        "signerVmName": "[concat(variables('prefix'),'-signer-vm')]",
        "availabilitySetsName": "[concat(variables('prefix'),'-signer-avset')]",
        "signerIpName": "[concat(variables('prefix'),'-signer-pip')]",
        "partNicName": "[concat(variables('prefix'),'-part-nic')]",
        "partVmName": "[concat(variables('prefix'),'-part-vm')]",
        "partAvailabilitySetsName": "[concat(variables('prefix'),'-part-avset')]",
        "partIpName": "[concat(variables('prefix'),'-part-pip')]",
        "chaincorePort": 1999,
        "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
        },
        "nestedURls": {
            "generatorVmSetupURL": "[concat(variables('baseUrl'),'/nested/generator-vm-',parameters('authenticationType'),'.json')]",
            "generatorExtensionSetupURL": "[concat(variables('baseUrl'),'/nested/generator-extension.json')]",
            "generatorNicSetupURL": "[concat(variables('baseUrl'),'/nested/generator-nic.json')]",
            "generatorPipSetupURL": "[concat(variables('baseUrl'),'/nested/generator-gtwy-pip.json')]",
            "nsgSetupURL": "[concat(variables('baseUrl'),'/nested/nsg.json')]",
            "generatorSetupURL": "[concat(variables('baseUrl'),'/nested/generator-setup.json')]",
            "signerSetupURLReg1": "[concat(variables('baseUrl'),'/nested/',variables('signerTemplate')[variables('signerNodeCountReg1')])]",
            "partSetupURLReg1": "[concat(variables('baseUrl'),'/nested/',variables('participantTemplate')[variables('participantNodeCountReg1')])]",
            "signerSetupURLReg2": "[concat(variables('baseUrl'),'/nested/',variables('signerTemplate')[variables('signerNodeCountReg2')])]",
            "partSetupURLReg2": "[concat(variables('baseUrl'),'/nested/',variables('participantTemplate')[variables('participantNodeCountReg2')])]",
            "signerSetupURLReg3": "[concat(variables('baseUrl'),'/nested/',variables('signerTemplate')[variables('signerNodeCountReg3')])]",
            "partSetupURLReg3": "[concat(variables('baseUrl'),'/nested/',variables('participantTemplate')[variables('participantNodeCountReg3')])]",
            "vmsSetupURL": "[concat(variables('baseUrl'),'/nested/signer-participant-vm-',parameters('authenticationType'),'.json')]",
            "extensionSetupURL": "[concat(variables('baseUrl'),'/nested/signer-participant-extension.json')]",
            "nicSetupURL": "[concat(variables('baseUrl'),'/nested/signer-participant-nic.json')]",
            "pipSetupURL": "[concat(variables('baseUrl'),'/nested/signer-participant-pip.json')]",
            "gatewaySetupURL": [
                "[concat(variables('baseUrl'),'/nested/gateway.json')]",
                "[concat(variables('baseUrl'),'/nested/',variables('vpnGwtTemplate')[variables('totalCountReg2')])]",
                "[concat(variables('baseUrl'),'/nested/',variables('vpnGwtTemplate')[variables('totalCountReg3')])]"
            ],
            "connectionsSetupURl": [
                "[concat(variables('baseUrl'),'/nested/',variables('connectionsTemplate')[variables('totalCountReg2')])]",
                "[concat(variables('baseUrl'),'/nested/',variables('connectionsTemplate')[variables('totalCountReg3')])]"
            ],
            "pipGtwSetupURL": [
                "[concat(variables('baseUrl'),'/nested/generator-gtwy-pip.json')]",
                "[concat(variables('baseUrl'),'/nested/',variables('pipGwtTemplate')[variables('totalCountReg2')])]",
                "[concat(variables('baseUrl'),'/nested/',variables('pipGwtTemplate')[variables('totalCountReg3')])]"
            ],
            "oneRegionSetupURL": "[concat(variables('baseUrl'),'/nested/one-region.json')]",
            "region2SetupURL": "[concat(variables('baseUrl'),'/nested/',variables('regionTemplate')[variables('totalCountReg2')])]",
            "region3SetupURL": "[concat(variables('baseUrl'),'/nested/',variables('regionTemplate')[variables('totalCountReg3')])]",
            "multiRegionURL": "[concat(variables('baseUrl'),'/nested/',variables('multiTemplate')[variables('totalCountReg2and3')])]",
            "vpnGwtPipSetupURL": "[concat(variables('baseUrl'),'/nested/vpn-gwt-pip.json')]",
            "vnetSetupURL": "[concat(variables('baseUrl'),'/nested/',variables('vnetTemplate')[variables('regionCount')])]",
            "vnetmultiSetupURL": "[concat(variables('baseUrl'),'/nested/vnet-multi.json')]",
            "keyVaultSetupURL": "[concat(variables('baseUrl'),'/nested/keyvault.json')]",
            "avaialabilitySetSetupURL": "[concat(variables('baseUrl'),'/nested/availability-set.json')]",
            "signerScriptUrl": "[concat(variables('baseUrl'),'/scripts/signer-script.sh')]",
            "generatorScriptUrl": "[concat(variables('baseUrl'),'/scripts/generator-script.sh')]",
            "partScriptUrl": "[concat(variables('baseUrl'),'/scripts/participant-script.sh')]",
            "logScriptUrl": "[concat(variables('baseUrl'),'/scripts/logging.sh')]"
        },
        "gatewaySkuTypes": {
            "Basic": "Basic",
            "Standard": "Standard",
            "HighPerformance": "HighPerformance",
            "UltraPerformance": "UltraPerformance"
        },
        "vnetSettings": {
            "region1": {
                "regionCount": "[parameters('regionCount')]",
                "virtualNetworksName": "[concat(variables('prefix'),'-vnet')]",
                "subnet1Name": "generator-subnet",
                "subnet2Name": "signer-subnet",
                "subnet3Name": "participant-subnet",
                "vnetRange": "10.1.0.0/16",
                "subnet1Range": "10.1.1.0/24",
                "subnet2Range": "10.1.2.0/24",
                "subnet3Range": "10.1.3.0/24",
                "gatewaySubnetRange": "10.1.0.0/24",
                "apiVersion": "[variables('apiVersion').networkApiVersion]"
            },
            "region2": {
                "regionCount": "[parameters('regionCount')]",
                "virtualNetworksName": "[concat(variables('prefix'),'-vnet')]",
                "subnet1Name": "generator-subnet",
                "subnet2Name": "signer-subnet",
                "subnet3Name": "participant-subnet",
                "vnetRange": "10.2.0.0/16",
                "subnet1Range": "10.2.1.0/24",
                "subnet2Range": "10.2.2.0/24",
                "subnet3Range": "10.2.3.0/24",
                "gatewaySubnetRange": "10.2.0.0/24",
                "apiVersion": "[variables('apiVersion').networkApiVersion]"
            },
            "region3": {
                "regionCount": "[parameters('regionCount')]",
                "virtualNetworksName": "[concat(variables('prefix'),'-vnet')]",
                "subnet1Name": "generator-subnet",
                "subnet2Name": "signer-subnet",
                "subnet3Name": "participant-subnet",
                "vnetRange": "10.3.0.0/16",
                "subnet1Range": "10.3.1.0/24",
                "subnet2Range": "10.3.2.0/24",
                "subnet3Range": "10.3.3.0/24",
                "gatewaySubnetRange": "10.3.0.0/24",
                "apiVersion": "[variables('apiVersion').networkApiVersion]"
            }
        },
        "apiVersion": {
            "computeApiVersion": "2016-04-30-preview",
            "networkApiVersion": "2016-03-30",
            "keyVaultApiVersion": "2015-06-01",
            "gatewayApiVersion": "2016-09-01",
            "deploymentApiVersion": "2016-02-01",
            "dockerApiVersion": "2015-05-01-preview"
        },
        "keyVaultSettings": {
            "keyVaultName": "[concat('key-',variables('suffix'),'-vlt')]",
            "tenantId": "[subscription().tenantId]",
            "location": "[parameters('location_1')]",
            "objectId": "[parameters('objectId')]",
            "apiVersion": "[variables('apiVersion').keyVaultApiVersion]"
        },
        "nsgSettings": {
            "nsgName": "[concat(variables('prefix'),'-nsg')]",
            "apiVersion": "[variables('apiVersion').networkApiVersion]"
        },
        "generatorSettings": {
            "genVMsettings": {
                "suffix": "[variables('suffix')]",
                "nicName": "[variables('generatorNicName')]",
                "publisher": "[variables('imageReference').publisher]",
                "offer": "[variables('imageReference').offer]",
                "sku": "[variables('imageReference').sku]",
                "version": "[variables('imageReference').version]",
                "diskSizeGB": 30,
                "vmName": "[variables('generatorVmName')]",
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "dockerApiVersion": "[variables('apiVersion').dockerApiVersion]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]",
                "vmSize": "[parameters('generatorVmSize')]",
                "storageAccountType": "[parameters('storageAccountType')]",
                "passwordOrSshKey": "[parameters('authenticationType')]",
                "sshPublicKey": "[parameters('sshPublicKey')]"
            },
            "genNicSettings": {
                "nicName": "[variables('generatorNicName')]",
                "privateIPAllocationMethod": "Dynamic",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "virtualNetworksName": "[variables('vnetSettings').region1.virtualNetworksName]",
                "subnetName": "[variables('vnetSettings').region1.subnet1Name]",
                "pipName": "[variables('generatorPipName')]",
                "nsgName": "[variables('nsgSettings').nsgName]"
            },
            "genPipSettings": {
                "pipName": "[variables('generatorPipName')]",
                "pipDns": "[concat('generator-',variables('suffix'))]",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "publicIPAllocationMethod": "Dynamic"
            },
            "genExtensionSettings": {
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "vmName": "[variables('generatorVmName')]",
                "logScriptUrl": "[variables('nestedURls').logScriptUrl]",
                "portNumber": "[variables('chaincorePort')]",
                "scriptFileName": "generator-script.sh",
                "networkTokenName": "signet",
                "adminUsername": "[parameters('adminUsername')]",
                "logScriptFileName": "logging.sh",
                "baseUrl": "[variables('baseUrl')]",
                "servicePrincipal": "[parameters('servicePrincipal')]",
                "secretKey": "[parameters('secretKey')]",
                "tenantId": "[subscription().tenantId]",
                "subscriptionId": "[subscription().subscriptionId]",
                "keyVaultName": "[variables('keyVaultSettings').keyVaultName]"
            }
        },
        "signerSettings": {
            "signerAvailSetSettings": {
                "availabilitySetsName": "[variables('availabilitySetsName')]",
                "apiVersion": "[variables('apiVersion').computeApiVersion]"
            },
            "signerVMsettings": {
                "suffix": "[variables('suffix')]",
                "availabilitySetsName": "[variables('availabilitySetsName')]",
                "nicName": "[variables('signerNicName')]",
                "vmName": "[variables('signerVmName')]",
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "dockerApiVersion": "[variables('apiVersion').dockerApiVersion]",
                "publisher": "[variables('imageReference').publisher]",
                "offer": "[variables('imageReference').offer]",
                "sku": "[variables('imageReference').sku]",
                "version": "[variables('imageReference').version]",
                "diskSizeGB": 30,
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]",
                "vmSize": "[parameters('signerVmSize')]",
                "storageAccountType": "[parameters('storageAccountType')]",
                "passwordOrSshKey": "[parameters('authenticationType')]",
                "sshPublicKey": "[parameters('sshPublicKey')]"
            },
            "signerNicSettings": {
                "nicName": "[variables('signerNicName')]",
                "privateIPAllocationMethod": "Dynamic",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "pipName": "[variables('signerIpName')]",
                "virtualNetworksName": "[variables('vnetSettings').region1.virtualNetworksName]",
                "subnetName": "[variables('vnetSettings').region1.subnet2Name]",
                "nsgName": "[variables('nsgSettings').nsgName]"
            },
            "signerPipSettings": {
                "pipName": "[variables('signerIpName')]",
                "pipDns": "[concat('signer-',variables('suffix'))]",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "publicIPAllocationMethod": "Dynamic"
            },
            "signerExtensionSettings": {
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "vmName": "[variables('signerVmName')]",
                "logScriptUrl": "[variables('nestedURls').logScriptUrl]",
                "adminUsername": "[parameters('adminUsername')]",
                "portNumber": "[variables('chaincorePort')]",
                "logScriptFileName": "logging.sh",
                "baseUrl": "[variables('baseUrl')]",
                "scriptFileName": "signer-script.sh",
                "servicePrincipal": "[parameters('servicePrincipal')]",
                "secretKey": "[parameters('secretKey')]",
                "tenantId": "[subscription().tenantId]",
                "subscriptionid": "[subscription().subscriptionId]",
                "keyVaultName": "[variables('keyVaultSettings').keyVaultName]",
                "tokenName": "sigClientToken"
            }
        },
        "participantSettings": {
            "partAvailSetSettings": {
                "availabilitySetsName": "[variables('partAvailabilitySetsName')]",
                "apiVersion": "[variables('apiVersion').computeApiVersion]"
            },
            "partVMsettings": {
                "suffix": "[variables('suffix')]",
                "availabilitySetsName": "[variables('partAvailabilitySetsName')]",
                "nicName": "[variables('partNicName')]",
                "vmName": "[variables('partVmName')]",
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "dockerApiVersion": "[variables('apiVersion').dockerApiVersion]",
                "publisher": "[variables('imageReference').publisher]",
                "offer": "[variables('imageReference').offer]",
                "sku": "[variables('imageReference').sku]",
                "version": "[variables('imageReference').version]",
                "diskSizeGB": 30,
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]",
                "vmSize": "[parameters('participantVmSize')]",
                "storageAccountType": "[parameters('storageAccountType')]",
                "passwordOrSshKey": "[parameters('authenticationType')]",
                "sshPublicKey": "[parameters('sshPublicKey')]"
            },
            "partNicSettings": {
                "nicName": "[variables('partNicName')]",
                "privateIPAllocationMethod": "Dynamic",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "pipName": "[variables('partIpName')]",
                "virtualNetworksName": "[variables('vnetSettings').region1.virtualNetworksName]",
                "subnetName": "[variables('vnetSettings').region1.subnet3Name]",
                "nsgName": "[variables('nsgSettings').nsgName]"
            },
            "partPipSettings": {
                "pipName": "[variables('partIpName')]",
                "pipDns": "[concat('participant-',variables('suffix'))]",
                "apiVersion": "[variables('apiVersion').networkApiVersion]",
                "publicIPAllocationMethod": "Dynamic"
            },
            "partExtensionSettings": {
                "apiVersion": "[variables('apiVersion').computeApiVersion]",
                "vmName": "[variables('partVmName')]",
                "logScriptUrl": "[variables('nestedURls').logScriptUrl]",
                "adminUsername": "[parameters('adminUsername')]",
                "portNumber": "[variables('chaincorePort')]",
                "logScriptFileName": "logging.sh",
                "baseUrl": "[variables('baseUrl')]",
                "scriptFileName": "participant-script.sh",
                "servicePrincipal": "[parameters('servicePrincipal')]",
                "secretKey": "[parameters('secretKey')]",
                "tenantId": "[subscription().tenantId]",
                "subscriptionid": "[subscription().subscriptionId]",
                "keyVaultName": "[variables('keyVaultSettings').keyVaultName]",
                "tokenName": "parClientToken"
            }
        },
        "gatewayPipSettings": {
            "pipName": "gateway-pip",
            "pipDns": "[concat('gateway-',variables('suffix'))]",
            "apiVersion": "[variables('apiVersion').networkApiVersion]",
            "publicIPAllocationMethod": "Dynamic"
        },
        "vpnGatewaySettings": {
            "gatewayName": "[concat(variables('prefix'),'-gateway')]",
            "apiVersion": "[variables('apiVersion').gatewayApiVersion]",
            "gatewayPipName": "[variables('gatewayPipSettings').pipName]",
            "vpnType": "RouteBased",
            "sku": "[variables('gatewaySkuTypes').Basic]"
        },
        "connectionSettings": {
            "apiVersion": "[variables('apiVersion').networkApiVersion]",
            "gatewayNameReg": "[variables('vpnGatewaySettings').gatewayName]",
            "VPNSharedKey": "[parameters('VPNSharedKey')]"
        },
        "oneRegionDep": "oneRegionSetup",
        "multiRegionDep": "multiRegionSetup",
        "locationsArray": [
            "[variables('location_1')]",
            "[variables('location_2')]",
            "[variables('location_3')]"
        ]
    },
    "resources": [
        {
            "name": "keyVaultSetup",
            "apiVersion": "[variables('apiVersion').deploymentApiVersion]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedURLs').keyVaultSetupURL]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultSettings": {
                        "value": "[variables('keyVaultSettings')]"
                    }
                }
            }
        },
        {
            "name": "[variables('oneRegionDep')]",
            "apiVersion": "[variables('apiVersion').deploymentApiVersion]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedURLs').oneRegionSetupURL]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location_1')]"
                    },
                    "prefix": {
                        "value": "[variables('prefix')]"
                    },
                    "nestedURls": {
                        "value": "[variables('nestedURls')]"
                    },
                    "apiVersion": {
                        "value": "[variables('apiVersion')]"
                    },
                    "vnetSettings": {
                        "value": "[variables('vnetSettings').region1]"
                    },
                    "generatorSettings": {
                        "value": "[variables('generatorSettings')]"
                    },
                    "signerSettings": {
                        "value": "[variables('signerSettings')]"
                    },
                    "participantSettings": {
                        "value": "[variables('participantSettings')]"
                    },
                    "nsgSettings": {
                        "value": "[variables('nsgSettings')]"
                    },
                    "signerNodeCountReg1": {
                        "value": "[variables('signerNodeCountReg1')]"
                    },
                    "participantNodeCountReg1": {
                        "value": "[variables('participantNodeCountReg1')]"
                    }
                }
            }
        },
        {
            "name": "[variables('multiRegionDep')]",
            "apiVersion": "[variables('apiVersion').deploymentApiVersion]",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[variables('oneRegionDep')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedURLs').multiRegionURL]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "prefix": {
                        "value": "[variables('prefix')]"
                    },
                    "location": {
                        "value": "[variables('locationsArray')]"
                    },
                    "nestedURls": {
                        "value": "[variables('nestedURls')]"
                    },
                    "apiVersion": {
                        "value": "[variables('apiVersion')]"
                    },
                    "vnetSettings": {
                        "value": "[variables('vnetSettings')]"
                    },
                    "signerSettings": {
                        "value": "[variables('signerSettings')]"
                    },
                    "participantSettings": {
                        "value": "[variables('participantSettings')]"
                    },
                    "nsgSettings": {
                        "value": "[variables('nsgSettings')]"
                    },
                    "generatorFqdn": {
                        "value": "[reference(variables('oneRegionDep')).outputs.generatorFqdn.value]"
                    },
                    "signerNodeCountReg2": {
                        "value": "[variables('signerNodeCountReg2')]"
                    },
                    "partNodeCountReg2": {
                        "value": "[variables('participantNodeCountReg2')]"
                    },
                    "signerNodeCountReg3": {
                        "value": "[variables('signerNodeCountReg3')]"
                    },
                    "partNodeCountReg3": {
                        "value": "[variables('participantNodeCountReg3')]"
                    },
                    "regionCount": {
                        "value": "[variables('regionCount')]"
                    },
                    "gatewayPipSettings": {
                        "value": "[variables('gatewayPipSettings')]"
                    },
                    "vpnGatewaySettings": {
                        "value": "[variables('vpnGatewaySettings')]"
                    },
                    "connectionSettings": {
                        "value": "[variables('connectionSettings')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "SSH_to_generatorVM ": {
            "type": "string",
            "value": "[concat('ssh ',parameters('adminUsername'),'@',reference(variables('oneRegionDep')).outputs.generatorFqdn.value)]"
        },
        "generatorDashboardURL ": {
            "type": "string",
            "value": "[concat('http://',reference(variables('oneRegionDep')).outputs.generatorFqdn.value,':',variables('chaincorePort'))]"
        }
    }
}